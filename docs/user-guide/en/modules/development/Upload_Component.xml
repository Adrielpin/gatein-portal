<!--

    Copyright (C) 2009 eXo Platform SAS.
    
    This is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation; either version 2.1 of
    the License, or (at your option) any later version.
    
    This software is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public
    License along with this software; if not, write to the Free
    Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
    02110-1301 USA, or see the FSF site: http://www.fsf.org.

-->

<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook V4.4//EN" "http://www.oasis-open.org/docbook/sgml/4.4/docbookx.dtd">
<section>
	<title>Upload Component</title>
	<section>
		<title>Overview</title>
	</section>
	<para>In this article, you will learn how to :</para>
	<itemizedlist>
		<listitem>configure the Upload service</listitem>
		<listitem>add a default upload size limit</listitem>
		<listitem>use the Upload component in your application, with a
			specific upload size limit</listitem>
		<listitem>clean the service when the upload finishes</listitem>
	</itemizedlist>
	<variablelist>
		<listitem>The size limit feature is available since Portal 2.5.3</listitem>
	</variablelist>
	<section>
		<title>Upload Service</title>
	</section>
	<para>The service is defined by the class :
		org.exoplatform.upload.UploadService;</para>
	<para>You can configure it with the following xml code :</para>
	<programlisting>&lt;component&gt;
   &lt;type&gt;org.exoplatform.upload.UploadService&lt;/type&gt;
     &lt;init-params&gt;
       &lt;value-param&gt;
        &lt;name&gt;upload.limit.size&lt;/name&gt;
        &lt;description&gt;Maximum size of the file to upload in MB&lt;/description&gt;
        &lt;value&gt;10&lt;/value&gt;
      &lt;/value-param&gt;
    &lt;/init-params&gt;  
  &lt;/component&gt;
</programlisting><para>As you can see, you can configure a default upload size limit for the service. The value unit is in MegaBytes. This limit will be used by default by all applications if no specific limit is set. You will see in the next chapter how to set a different limit for your application.</para><para>If you set the value at 0, the upload size will be unlimited.</para>
<section><title>How to use the upload component in your application</title></section>
<para>To use the component, you must create an object of type org.exoplatform.webui.form.UIFormUploadInput, using one of the two available constructors :</para><programlisting>public UIFormUploadInput(String name, String bindingExpression)
</programlisting><para>or:</para><programlisting>public UIFormUploadInput(String name, String bindingExpression, int limit)
</programlisting><para>Here is an example using the second form : {code} PortletRequestContext pcontext = (PortletRequestContext)WebuiRequestContext.getCurrentInstance(); PortletPreferences portletPref = pcontext.getRequest().getPreferences(); int limitMB = Integer.parseInt(portletPref.getValue(&quot;uploadFileSizeLimitMB&quot;, &quot;&quot;).trim()); UIFormUploadInput uiInput = new UIFormUploadInput(&quot;upload&quot;, &quot;upload&quot;, limitMB) ;</para><programlisting>
To get the limit from the xml configuration, you can add this piece of code in the files portlet.xml or portlet-preferences.xml :
{code:xml}
&lt;preference&gt;
  &lt;name&gt;uploadFileSizeLimitMB&lt;/name&gt;
  &lt;value&gt;30&lt;/value&gt;
  &lt;read-only&gt;false&lt;/read-only&gt;
&lt;/preference&gt; 
</programlisting><para>Again, a 0 value means unlimited upload size, and the value unit is set in MegaBytes.</para><para>To get the uploaded data use the ~~getUploadDataAsStream()~~ method: {code} UIFormUploadInput input = (UIFormUploadInput)uiForm.getUIInput(&quot;upload&quot;); InputStream inputStream = input.getUploadDataAsStream(); ... jcrData.setValue(inputStream) ; {code}</para><para>1 Clean the uploaded file</para><para>The upload service stores a temporary file on the filesystem during the process. When the upload is finished, you must clean the service in order to :</para><itemizedlist><listitem>delete the temporary file</listitem><listitem>delete the classes used for the upload</listitem></itemizedlist><para>To do that, use the ~~removeUpload()~~ method defined in the upload service, like this :</para><programlisting>UploadService uploadService = uiForm.getApplicationComponent(UploadService.class) ;
UIFormUploadInput uiChild = uiForm.getChild(UIFormUploadInput.class) ;
uploadService.removeUpload(uiChild.getUploadId()) ;
</programlisting><variablelist><listitem>Be sure to get and save the file in a JCR node <emphasis role="bold">before</emphasis> you clean the service</listitem></variablelist>
</section>