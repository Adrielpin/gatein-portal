<!--

    Copyright (C) 2009 eXo Platform SAS.
    
    This is free software; you can redistribute it and/or modify it
    under the terms of the GNU Lesser General Public License as
    published by the Free Software Foundation; either version 2.1 of
    the License, or (at your option) any later version.
    
    This software is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
    Lesser General Public License for more details.
    
    You should have received a copy of the GNU Lesser General Public
    License along with this software; if not, write to the Free
    Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
    02110-1301 USA, or see the FSF site: http://www.fsf.org.

-->

<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook V4.4//EN" "http://www.oasis-open.org/docbook/sgml/4.4/docbookx.dtd">
<chapter>
<title>RTL (Right To Left) Framework</title>
<section><title>Overview</title></section>
<para>The RTL framework (Right-To-Left framework) provides a set of tools that can be leveraged by the user interface components to handle directionality gracefully.</para><para>&lt;object width=&quot;400&quot; height=&quot;300&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip<emphasis>id=2870309&amp;server=vimeo.com&amp;show</emphasis>title=1&amp;show<emphasis>byline=1&amp;show</emphasis>portrait=0&amp;color=&amp;fullscreen=1&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip<emphasis>id=2870309&amp;server=vimeo.com&amp;show</emphasis>title=1&amp;show<emphasis>byline=1&amp;show</emphasis>portrait=0&amp;color=&amp;fullscreen=1&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;400&quot; height=&quot;300&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;br /&gt;&lt;a href=&quot;http://vimeo.com/&quot;&gt;GateIn Portal: RTL - Arabic support&lt;/a&gt; from &lt;a href=&quot;http://vimeo.com/user896168&quot;&gt;Benjamin Mestrallet&lt;/a&gt; on &lt;a href=&quot;http://vimeo.com&quot;&gt;Vimeo&lt;/a&gt;.</para>
<section><title>Direction</title></section>
<para>The orientation depends on the current locale and during a portal request the current orientation is made available by various means. The orientation is a Java 5 enum that provides a set of functionalities:</para><programlisting>
   LT, // Western Europe
   RT, // Middle East (Arabic, Hebrew)
   TL, // Japanese, Chinese, Korean
   TR; // Mongolian
   public boolean isLT() { ... }
   public boolean isRT() { ... }
   public boolean isTL() { ... }
   public boolean isTR() { ... }
}{code}
The object defining the current Orientation for the current request is the UIPortalApplication. However it should be accessed at runtime using the RequestContext that delegates to the UIPortalApplication. In the case of a PortalRequestContext it is a direct delegate as the PortalRequestContext has a reference to the current UIPortalApplication. In case of a different context such as the PortletRequestContext, it delegates to the parent context given the fact that the root RequestContext is always a PortalRequestContext.
h1. Usage in different layers
h2. Java
Orientation is obtained from the RequestContext:
</programlisting>
<section><title>Groovy templates</title></section>
<para>Orientation is obtained from implicit variables defined by the groovy binding context:</para><itemizedlist><listitem>orientation : the current orientation as an Orientation</listitem><listitem>isLT : the value of orientation.isLT()</listitem><listitem>isRT : the value of orientation.isRT()</listitem><listitem>dir : the string ltr if the orientation is LT or the string rtl if the orientation is RT</listitem></itemizedlist>
<section><title>Stylesheet</title></section>
<para>The skin service handles stylesheet rewriting to accommodate the orientation. It works by appending -lt or -rt to the stylesheet name. For instance <emphasis role="bold">/web/skin/portal/webui/component/UIFooterPortlet/DefaultStylesheet-rt.css</emphasis> will return the same stylesheet as <emphasis role="bold">/web/skin/portal/webui/component/UIFooterPortlet/DefaultStylesheet.css</emphasis> but processed for the RT orientation. Obviously the -lt suffix is optional.</para><para>Stylesheet authors can annotate their stylesheet to create content that depends on the orientation.</para><para>In the example we need to use the orientation to modify the float attribute that will make the horizontal tabs either float on left or on right:</para><programlisting>  float: left; /* orientation=lt */
  float: right; /* orientation=rt */
  font-weight: bold;
  text-align: center;
  white-space: nowrap;
}{code}
The LT output will be:
</programlisting><para>float: left; /<emphasis role="bold">orientation=lt</emphasis>{/ font-weight: bold; text-align: center; white-space: nowrap; }{code}</para><para>The RT output will be:</para><programlisting>  float: right; /* orientation=rt */
  font-weight: bold;
  text-align: center;
  white-space: nowrap;
}{code}
In this example we need to modify the padding according to the orientation:
</programlisting><para>color: white; line-height: 24px; padding: 0px 5px 0px 0px; /<emphasis role="bold">orientation=lt</emphasis>/ padding: 0px 0px 0px 5px; /<emphasis role="bold">orientation=rt</emphasis>{/ }{code}</para><para>The LT output will be:</para><programlisting>  color: white;
  line-height: 24px;
  padding: 0px 5px 0px 0px; /* orientation=lt */
}{code}
The RT output will be:
</programlisting><para>color: white; line-height: 24px; padding: 0px 0px 0px 5px; /<emphasis role="bold">orientation=rt</emphasis>{/ }{code}</para>
<section><title>Images</title></section>
<para>Sometime it is necessary to create an RT version of an image that will be used from a template or from a stylesheet. However symmetric images can be automatically generated avoiding the necessity to create a mirrored version of an image and furthermore avoiding maintenance cost.</para><para>The web resource filter uses the same naming pattern than the skin service does. When an image ends with the -rt suffix the portal will attempt to locate the original image and create a mirror of it. For instance requesting the image <emphasis role="bold">/GateInResources/skin/DefaultSkin/webui/component/UITabSystem/UITabs/background/NormalTabStyle-rt.gif</emphasis> returns a mirror of the image <emphasis role="bold">/GateInResources/skin/DefaultSkin/webui/component/UITabSystem/UITabs/background/NormalTabStyle.gif</emphasis> and it works perfectly because the image is symmetric.</para><para>Here is an example combining stylesheet and images:</para><programlisting>  line-height: 24px; 
  background: url('background/NavigationTab.gif') no-repeat right top; /* orientation=lt */
  background: url('background/NavigationTab-rt.gif') no-repeat left top; /* orientation=rt */
  padding-right: 2px; /* orientation=lt */
  padding-left: 2px; /* orientation=rt */
}{code}
h2. Client side JavaScript
Just use the *GateIn.core.I18n* object that provides the following methods:
* getOrientation() : returns either the string lt or rt
* getDir() : returns either the string ltr or rtl
* isLT() : returns true for LT
* isRT() : returns true of RT
</programlisting>
</chapter>