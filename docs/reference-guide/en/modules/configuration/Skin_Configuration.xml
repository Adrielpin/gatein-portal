<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../Reference_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="sect-Reference_Guide-Skin_Configuration">
  <title>Skin Configuration</title>

  <section id="sect-Reference_Guide-Skin_Configuration-Overview">
    <title>Overview</title>

    <para>&PRODUCT; provides support for skinning the entire portal User
    Interface (UI) including your own portlets. Skins are designed to help you
    pack and reuse common graphic resources.</para>
  </section>

  <section id="sect-Reference_Guide-Skin_Configuration-Skin_Switching">
    <title>Skin Switching</title>

    <para>Skins can be switched dynamically at runtime.</para>

    <mediaobject>
      <imageobject>
        <imagedata fileref="images/portal-change-skin.png" format="PNG"
                   width="444" />
      </imageobject>
    </mediaobject>

    <para>When you switch, the whole portal will be repainted and the new
    styles will be applied to the UI.</para>
  </section>

  <section id="sect-Reference_Guide-Skin_Configuration-Types_of_Styles">
    <title>Types of skins</title>

    <para>The complete skinning of a page can be decomposed into four
    parts:</para>

    <variablelist>
      <varlistentry>
        <term>Portal skin</term>

        <listitem>
          <para>CSS styles for html tags (ex div,th,td...) and the portal UI
          (including the toobar).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Portlet skins</term>

        <listitem>
          <para>CSS styles for each portlet. Used when a portlet wants to
          define it's own CSS.</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Window styles</term>

        <listitem>
          <para>CSS styles for portlet windows (which surround either
          gadgets or portlets, and add control buttons and decorations).</para>
        </listitem>
      </varlistentry>

      <varlistentry>
        <term>Shared styles</term>

        <listitem>
          <para>&PRODUCT; WebUI component styles are reused among most of the
          shipped-in portlets.</para>
        </listitem>
      </varlistentry>
    </variablelist>

    <para>The main portal skin stylesheet
    (<filename>/DefaultSkin/skin/Stylesheet.css</filename>)is shown below as
    an example:</para>

    <programlisting>@import url(/eXoResources/skin/PortletThemes/Stylesheet.css) ;
@import url(DefaultSkin/portal/webui/component/UIPortalApplicationSkin.css) ;
@import url(DefaultSkin/webui/component/Stylesheet.css) ;</programlisting>
  </section>

  <section id="sect-Reference_Guide-Skin_Configuration-Skins_in_Page_Markups">
    <title>Skins in Page Markups</title>

    <para>A &PRODUCT; skin contains css styles for the portal's components but
    also shares components that may be reused in portlets. When &PRODUCT;
    generates a portal page markup, it inserts stylesheet links in the page's
    <literal>head</literal> tag.</para>

    <para>In the snippet code below you can see two types of links:</para>

    <programlistingco>
      <areaspec>
        <area coords="3" id="area-Reference_Guide-Skin_Configuration-Coreskin" />
        <area coords="4"
              id="area-Reference_Guide-Skin_Configuration-Stylesheets" />
      </areaspec>
<programlisting>&lt;head&gt;
...   
&lt;link id="CoreSkin" rel="stylesheet" type="text/css" href="/eXoResources/skin/Stylesheet.css" /&gt;
&lt;link id="web_FooterPortlet" rel="stylesheet" type="text/css" href= "/web/skin/portal/webui/component/UIFooterPortlet/DefaultStylesheet.css" /&gt;
&lt;link id="web_NavigationPortlet" rel="stylesheet" type="text/css" href= "/web/skin/portal/webui/component/UINavigationPortlet/DefaultStylesheet.css" /&gt;
&lt;link id="web_HomePagePortlet" rel="stylesheet" type="text/css" href= "/portal/templates/skin/webui/component/UIHomePagePortlet/DefaultStylesheet.css" /&gt;
&lt;link id="web_BannerPortlet" rel="stylesheet" type="text/css" href= "/web/skin/portal/webui/component/UIBannerPortlet/DefaultStylesheet.css" /&gt;
...
&lt;/head&gt;
</programlisting>
      <calloutlist>
        <callout arearefs="area-Reference_Guide-Skin_Configuration-Coreskin">
          <para>Portal skin stylesheet
          (<literal>id="CoreSkin"</literal>).</para>
        </callout>
        <callout arearefs="area-Reference_Guide-Skin_Configuration-Stylesheets">
          <para>Portlet skins stylesheets (all
          others). Each portlet within the page may contribute its
          own style(s)</para>
        </callout>
      </calloutlist>
    </programlistingco>

    <note>
      <para>Window styles are included with the portal skin</para>
    </note>
  </section>

    <section id="sect-Reference_Guide-Tips_and_Tricks-Set_the_default_skin">
      <title>Set the default skin</title>

      <para>The default skin of the portal is called Default. To change this value
      add a <literal>skin</literal> tag in <literal>portal.xml</literal> configuration file,
      where your portal is defined:</para>

      <programlisting role="XML">&lt;portal-config&gt;
  &lt;portal-name&gt;classic&lt;/portal-name&gt;
  &lt;locale&gt;en&lt;/locale&gt;
  &lt;access-permissions&gt;Everyone&lt;/access-permissions&gt;
  &lt;edit-permission&gt;*:/platform/administrators&lt;/edit-permission&gt;
  &lt;skin&gt;MySkin&lt;/skin&gt;
  &lt;creator&gt;root&lt;/creator&gt;
...
</programlisting>
    </section>


  <section id="sect-Reference_Guide-Skin_Configuration-How_to_create_a_new_skin">
    <title>How to create a new skin</title>

    <section id="sect-Reference_Guide-How_to_Configure_a_Portal_Skin-SkinService">
      <title>SkinService</title>

      <para>The SkinService is a &PRODUCT; service that manages the portal skin,
      portlet styles and portlet themes (window borders).</para>
    </section>

    <section id="sect-Reference_Guide-How_to_Configure_a_Portal_Skin-SkinConfigListener">
      <title>ResourceRequestFilter</title>

      <para>&PRODUCT; automatically discovers web archives that contain a
      file descriptor for skins (<filename>WEB-INF/gatein-resources.xml</filename>).</para>

      <para>Because of the Right-To-Left support all CSS files need to be
      retrieved through a Servlet filter and the web application needs to be
      configured to activate this filter. This is already done for
      01eXoResources.war web application.</para>

      <programlisting role="XML">&lt;filter&gt;
  &lt;filter-name&gt;ResourceRequestFilter&lt;/filter-name&gt; 
  &lt;filter-class&gt;org.exoplatform.portal.application.ResourceRequestFilter&lt;/filter-class&gt; 
&lt;/filter&gt;

&lt;filter-mapping&gt;
  &lt;filter-name&gt;ResourceRequestFilter&lt;/filter-name&gt;
  &lt;url-pattern&gt;*.css&lt;/url-pattern&gt; 
&lt;/filter-mapping&gt;</programlisting>
    </section>

    <section>
      <title>Skin configuration</title>

      <para>&PRODUCT; automatically discovers web archives that contain a
      file descriptor for skins (<filename>WEB-INF/gatein-resources.xml</filename>).The
    full schema can be found in
    <filename>02portal.war:/WEB-INF/gatein_resources_1-0.xsd</filename></para>

      <para>Here is an example:
      </para>
      <programlisting role="XML">&lt;gatein-resources&gt;
  &lt;portal-skin&gt;
    &lt;skin-name&gt;MySkin&lt;/skin-name&gt;
    &lt;css-path&gt;/skin/myskin.css&lt;/css-path&gt;
    &lt;overwrite&gt;false&lt;/overwrite&gt;
  &lt;/portal-skin&gt;
&lt;/gatein-resources&gt;
      </programlisting>

      <para>Here we defined a skin (MySkin) and the CSS location within the
      same web archive.</para>
      
    <para>Default portal skin and window styles are defined in
    <filename>01eXoResources.war:/WEB-INF/gatein-resources.xml</filename> and the part dedicated to
    skinning is defined like:
    </para>
       <programlisting role="XML">&lt;gatein-resources xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.gatein.org/xml/ns/gatein_resources_1_0" xmlns="http://www.ga
tein.org/xml/ns/gatein_resources_1_0.xsd"&gt;
  &lt;portal-skin&gt;
    &lt;skin-name&gt;Default&lt;/skin-name&gt;
    &lt;css-path&gt;/skin/Stylesheet.css&lt;/css-path&gt;
  &lt;/portal-skin&gt;

  &lt;!-- Simple window style --&gt;
  &lt;window-style&gt;
    &lt;style-name&gt;Simple&lt;/style-name&gt;
    &lt;style-theme&gt;
      &lt;theme-name&gt;SimpleBlue&lt;/theme-name&gt;
    &lt;/style-theme&gt;
    &lt;style-theme&gt;
      &lt;theme-name&gt;SimpleViolet&lt;/theme-name&gt;
    &lt;/style-theme&gt;
    &lt;style-theme&gt;
      &lt;theme-name&gt;SimpleOrange&lt;/theme-name&gt;
    &lt;/style-theme&gt;
    &lt;style-theme&gt;
      &lt;theme-name&gt;SimplePink&lt;/theme-name&gt;
    &lt;/style-theme&gt;
    &lt;style-theme&gt;
      &lt;theme-name&gt;SimpleGreen&lt;/theme-name&gt;
    &lt;/style-theme&gt;
  &lt;/window-style&gt;</programlisting>
    </section>

    <section>
      <title>Skin icon</title>

      <para>When selecting a skin, a preview of the skin is possible. It has
      to be defined in the current skin used to display the form to change
      skins.</para>

      <para>Put the screenshot of the skin in:
      <filename>01eXoResources.war:/skin/DefaultSkin/portal/webui/component/customization/UIChangeSkinForm/background</filename>
      and add the following in
      <filename>01eXoResources.war:/skin/DefaultSkin/portal/webui/component/customization/UIChangeSkinForm/Stylesheet.css:</filename>
      </para>
      <programlisting>.UIChangeSkinForm .UIItemSelector .TemplateContainer .<emphasis
            role="bold">MySkin</emphasis>Image {
  margin: auto; 
  width: 329px; height:204px; 
  background: url('background/<emphasis role="bold">MySkin</emphasis>.jpg') no-repeat top; 
  cursor: pointer ; 
}</programlisting>
    </section>
  </section>

  <section id="sect-Reference_Guide-Skin_Configuration-How_to_create_new_themes">
    <title>How to create a new window style</title>

    <para>Window styles are the CSS applied to window decoration. When an
    administrator choose a new application to add on a page he can decide
    which style of decoration would go around the window if any.</para>

    <para><mediaobject>
        <imageobject>
          <imagedata fileref="images/windowStyles.png" format="PNG"
                     width="444" />
        </imageobject>
      </mediaobject></para>

    <para>The code below illustrates the inclusion of all CSS resources for a
    new theme from the example file
    <literal>GateInResourcesCp060508/skin/MyPortalSkin/PortletThemes/Stylesheet.css</literal>.</para>

    <orderedlist>
      <listitem>
        <para>In <filename>01eXoResources:/WEB-INF/gatein-resources.xml</filename> add the
        following snippet:<programlisting>&lt;window-style&gt;
  &lt;style-name&gt;MyTheme&lt;/style-name&gt;
  &lt;style-theme&gt;
    &lt;theme-name&gt;MyThemeBlue&lt;/theme-name&gt;
  &lt;/style-theme&gt;
  &lt;style-theme&gt;
    &lt;theme-name&gt;MyThemeRed&lt;/theme-name&gt;
  &lt;/style-theme&gt;
&lt;/window-style&gt;</programlisting></para>

        <para>Here we created a group of themes called 'MyTheme' and two
        themes that reference CSS classnames.</para>
      </listitem>

      <listitem>
        <para>Create the CSS file:</para>
      </listitem>
    </orderedlist>

    <programlisting>
/*---- MyTheme ----*/
.MyTheme .WindowBarCenter .WindowPortletInfo {
  margin-right: 80px; /* orientation=lt */
  margin-left: 80px; /* orientation=rt */
}
.MyTheme .WindowBarCenter .ControlIcon {
  float: right;/* orientation=lt */
  float: left;/* orientation=rt */
  width: 24px; 
  height: 17px;
  cursor: pointer;
  background-image: url('background/MyTheme.png');
}
.MyTheme .ArrowDownIcon {
  background-position: center 20px;
}
.MyTheme .OverArrowDownIcon {
  background-position: center 116px;
}
.MyTheme .MinimizedIcon {
  background-position: center 44px;
}
.MyTheme .OverMinimizedIcon {
  background-position: center 140px;
}
.MyTheme .MaximizedIcon {
  background-position: center 68px;
}
.MyTheme .OverMaximizedIcon {
  background-position: center 164px;
}
.MyTheme .RestoreIcon {
  background-position: center 92px;
}
.MyTheme .OverRestoreIcon {
  background-position: center 188px;
}
.MyTheme .NormalIcon {
  background-position: center 92px;
}
.MyTheme .OverNormalIcon {
  background-position: center 188px;
}
.UIPageDesktop .MyTheme .ResizeArea {
  float: right;/* orientation=lt */
  float: left;/* orientation=rt */
  width: 18px; height: 18px;
  cursor: nw-resize;
  background: url('background/ResizeArea18x18.gif') no-repeat left top; /* orientation=lt */
  background: url('background/ResizeArea18x18-rt.gif') no-repeat right top; /* orientation=rt */
}
.MyTheme .Information {
  height: 18px; line-height: 18px;
  vertical-align: middle; font-size: 10px;
  padding-left: 5px;/* orientation=lt */
  padding-right: 5px;/* orientation=rt */
  margin-right: 18px;/* orientation=lt */
  margin-left: 18px;/* orientation=rt */
}
.MyTheme .WindowBarCenter .WindowPortletIcon {
  background-position: left top; /* orientation=lt */
  background-position: right top; /* orientation=rt */
  padding-left: 20px; /* orientation=lt */
  padding-right: 20px; /* orientation=rt */
  height: 16px;
  line-height: 16px;
}
.MyTheme .WindowBarCenter .PortletName {
  font-weight: bold;
  color: #333333;
  overflow: hidden;
  white-space: nowrap;
  width: 100%;
}
.MyTheme .WindowBarLeft {
  padding-left: 12px;
  background-image: url('background/MyTheme.png');
  background-repeat: no-repeat;
  background-position: left -148px;
}
.MyTheme .WindowBarRight {
  padding-right: 11px;
  background-image: url('background/MyTheme.png');
  background-repeat: no-repeat;
  background-position: right -119px;
}
.MyTheme .WindowBarCenter {
  background-image: url('background/MyTheme.png');
  background-repeat: repeat-x;
  background-position: left -90px;
}
.MyTheme .WindowBarCenter .FixHeight {
  height: 21px;
  padding-top: 8px;
}
.MyTheme .MiddleDecoratorLeft {
  padding-left: 12px;
  background: url('background/MyTheme.png') repeat-y left;
}
.MyTheme .MiddleDecoratorRight {
  padding-right: 11px;
  background: url('background/MyTheme.png') repeat-y right;
}
.MyTheme .MiddleDecoratorCenter {
  background: #ffffff;
}
.MyTheme .BottomDecoratorLeft {
  MyTheme: 12px;
  background-image: url('background/MyTheme.png');
  background-repeat: no-repeat;
  background-position: left -60px;
}
.MyTheme .BottomDecoratorRight {
  padding-right: 11px;
  background-image: url('background/MyTheme.png');
  background-repeat: no-repeat;
  background-position: right -30px;
}
.MyTheme .BottomDecoratorCenter {
  background-image: url('background/MyTheme.png');
  background-repeat: repeat-x;
  background-position: left top;
}
.MyTheme .BottomDecoratorCenter .FixHeight {
  height: 30px;
}
</programlisting>
  </section>
  
    <section id="sect-Reference_Guide-Skin_Configuration-Portlet_Styles">
    <title>How to create new Portlet skins</title>

    <para>Portlets often require additional styles that may not be defined by
    the portal skin. &PRODUCT; allows portlets to define additional
    stylesheets for each portlet and will append the corresponding
    <literal>link</literal> tags to the <literal>head</literal>.</para>

    <para>The link ID will be of the form
    <parameter>{portletAppName}{PortletName}</parameter>. For example:
    <literal>ContentPortlet</literal> in <literal>content.war</literal>, will
    give
    <parameter>id="content<literal>ContentPortlet"</literal></parameter></para>

    <para>To define a new CSS file to include whenever a portlet is added, the
    following snippet needs to be added in gatein-resources.xml<programlisting>&lt;portlet-skin&gt;
  &lt;application-name&gt;portletAppName&lt;/application-name&gt;
  &lt;portlet-name&gt;PortletName&lt;/portlet-name&gt;
  &lt;skin-name&gt;Default&lt;/skin-name&gt;
  &lt;css-path&gt;/skin/DefaultStylesheet.css&lt;/css-path&gt;
&lt;/portlet-skin&gt;

&lt;portlet-skin&gt;
  &lt;application-name&gt;portletAppName&lt;/application-name&gt;
  &lt;portlet-name&gt;PortletName&lt;/portlet-name&gt;
  &lt;skin-name&gt;OtherSkin&lt;/skin-name&gt;
  &lt;css-path&gt;/skin/OtherSkinStylesheet.css&lt;/css-path&gt;
&lt;/portlet-skin&gt;</programlisting></para>

    <para>The portal framework will include the CSS file corresponding to the
    skin used.</para>
    
    
    <section id="sect-Reference_Guide-Tips_and_Tricks-Change_portlet_icons">
      <title>Change portlet icons</title>

      <para>Each portlet is represented by an icon that you can see in the
      portlet registry. This icon can be changed by adding an image to the
      directory:</para>

      <itemizedlist>
        <listitem>
          <para><filename>skin/DefaultSkin/portletIcons/<replaceable>icon_name.png</replaceable></filename>.
          To be used correctly the icon must be named after the
          portlet.</para>
        </listitem>
      </itemizedlist>

      <para>For example, the icon for an account portlet named AccountPortlet
      would be located at:</para>

      <itemizedlist>
        <listitem>
          <para><filename>skin/DefaultSkin/portletIcons/AccountPortlet.png</filename></para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  
  
    <section id="sect-Reference_Guide-Skin_Configuration-Tips_and_Tricks">
    <title>Tips and Tricks</title>

    <section id="sect-Reference_Guide-Tips_and_Tricks-Easier_css_debuggin">
      <title>Easier css debugging</title>

      <para>By default, CSS files are cached and their imports are merged into
      a single CSS file at the server side. This reduces the number of HTTP
      requests from the browser to the server.</para>

      <para>The optimization code is quite simple as all the CSS files are
      parsed at the server startup time and all the @import and url(...)
      references are rewritten to support a single flat file. The result is
      stored in a cache directly used from the
      <literal>ResourceRequestFilter</literal>.</para>

      <para>Although the optimization is useful for a production environments,
      it may be easier to deactivate this optimization while debugging
      stylesheets. To do so, set the java system property
      <literal>exo.product.developing</literal> to
      <literal>true</literal>.</para>

      <para>For example, the property can be passed as a JVM parameter with
      <literal>-D</literal> option when running GateIn.</para>
      <programlisting>sh $JBOSS_HOME/bin/run.sh -Dexo.product.developing=true</programlisting>

      <orderedlist numeration="arabic">
        <listitem>
          <para>warning("This option may cause display bugs with certain
          browsers like Internet Explorer")</para>
        </listitem>
      </orderedlist>
    </section>
      <section id="sect-Reference_Guide-Tips_and_Tricks-Some_CSS_techniques">
      <title>Some CSS techniques</title>

      <para>It is recommended that users have some experience with CSS before
      studying &PRODUCT; CSS.</para>

      <para>&PRODUCT; relies heavily on CSS to create the layout and effects
      for the UI. Some common techniques for customizing &PRODUCT; CSS are
      explained below.</para>

      <section id="sect-Reference_Guide-Some_CSS_techniques-Decorator_pattern">
        <title>Decorator pattern</title>

        <para>The decorator is a pattern to create a contour or a curve around
        an area. In order to achieve this effect you need to create 9 cells.
        The BODY is the central area that you want to decorate. The other 8
        cells are distributed around the BODY cell. You can use the width,
        height and background image properties to achieve any decoration
        effect that you want.</para>

        <programlisting role="HTML">
-----------------------------------------------------------------------
|            |                                          |             |
| TopLeft    |               TopCenter                  |    TopRight |
|            |                                          |             |
-----------------------------------------------------------------------
|            |                                          |             |
| CenterLeft |                 BODY                     | CenterRight |
|            |                                          |             |
-----------------------------------------------------------------------
|            |                                          |             |
| BottomLeft |              BottomCenter                | BottomRight |
|            |                                          |             |
-----------------------------------------------------------------------
&lt;div class="Parent"&gt;
  &lt;div class="TopLeft"&gt;
    &lt;div class="TopRight"&gt;
      &lt;div class="TopCenter"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="CenterLeft"&gt;
    &lt;div class="CenterRight"&gt;
      &lt;div class="CenterCenter"&gt;BODY&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="BottomLeft"&gt;
    &lt;div class="BottomRight"&gt;
      &lt;div class="BottomCenter"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;
    &lt;/div&gt;
  &lt;div&gt;
&lt;/div&gt;
</programlisting>
      </section>

      <section id="sect-Reference_Guide-Some_CSS_techniques-Left_margin_left_pattern">
        <title>Left margin left pattern</title>

        <para>Left margin left pattern is a technique to create 2 blocks side
        by side. The left block will have a fixed size and the right block
        will take the rest of the available space. When the user resizes the
        browser the added or removed space will be taken from the right
        block.</para>

        <programlisting role="HTML">
|                         |                                                |      
|                         |                                                |      
| |&lt;--- fixed width ---&gt;| |                   will expand to right ----&gt;   |      
|                         |                                                |      
|                         |                                                |      
|                         |                                                |      
----
&lt;div class="Parent"&gt;
  &lt;div style="float: left; width: 100px"&gt;
  &lt;/div&gt;
  &lt;div style="margin-left: 105px;"&gt;
  &lt;div&gt;
  &lt;div style="clear: left"&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;/div&gt;
</programlisting>
      </section>
    </section>
  </section>
</section>
