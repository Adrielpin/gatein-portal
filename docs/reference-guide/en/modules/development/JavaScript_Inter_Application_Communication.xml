<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../Reference_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication">
	<title>JavaScript Inter Application Communication</title>
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Overview">
		<title>Overview</title>
		<para>
			JavaScript Inter Application Communication is designed to allow applications within a page to exchange data. This library is made for broadcasting messages on topic. 
		</para>
		<para>
			It is based on 3 functions:
		</para>
		<itemizedlist>
			<listitem>
				<para>
					Subscribe.
				</para>
			</listitem>
			<listitem>
				<para>
					Publish.
				</para>
			</listitem>
			<listitem>
				<para>
					Unsubscribe.
				</para>
			</listitem>
		</itemizedlist>
		<para>
			A subscription to a topic will receive any subtopic messages. For example; An application subscribed to "<literal>/eXo/application</literal>" will receive messages sent on the "<literal>/eXo/application/map</literal>" topic. A message sent on "<literal>/eXo</literal>", however, would not be received.
		</para>
		<variablelist>
			<title>Subscription Topics</title>
		  <varlistentry>
			<term>/eXo</term>
			<listitem>
				<para>
					This topic contains all the events generated by the platform.
				</para>
			</listitem>
		</varlistentry>
		<varlistentry>
			<term>/eXo/portal/notification</term>
			<listitem>
				<para>
					A message is sent on this topic will prompt a popup notification in the top right of the screen.
				</para>
			</listitem>
		</varlistentry>
		</variablelist>

	</section>
	
	<!--  
   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalchangeTitle">
      <title>/GateIn/portal/changeTitle (not
         implemented yet)</title>
      <para>
         Send a message on this channel to change (and to be notified) the title
         of the portal.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalpageLoaded">
      <title>/GateIn/portal/pageLoaded (not
         implemented yet)</title>
      <para>
         Receive a message when a page is loaded.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalpageUnloaded">
      <title>/eXo/portal/pageUnloaded (not
         implemented yet)</title>
      <para>
         Receive a message when a page is unloaded.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInapplicationapplicationLoaded">
      <title>/eXo/application/applicationLoaded
         (not implemented yet)</title>
      <para>
         Receive a message when an application is loaded in the page.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInapplicationapplicationUnloaded">
      <title>/eXo/application/applicationUnloaded
         (not implemented yet)</title>
      <para>
         Receive a message when an application is unloaded in the page.
		</para>
   </section>
  -->
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Library">
		<title>Library</title>
		<para>
			The Inter Application Communication library is found in <filename>01eXoResources.war:/javascript/eXo/core/Topic.js</filename>
		</para>
		
<programlisting>/**
 * publish is used to publish an event to the other subscribers to the given channels
 * @param {Object} senderId is a string that identify the sender
 * @param {String} topic is the topic that the message will be published
 * @param {Object} message is the message that's going to be delivered to the subscribers to the topic
 */
Topic.prototype.publish = function(/*Object*/ senderId, /*String*/ topicName, /*Object*/ message ) { ... }

/**
 * isSubscribed is used to check if a function receive the events from a topic
 * @param {String} topic The topic.
 * @param {Function} func is the name of the function of obj to call when a message is received on the topic
 */
Topic.prototype.isSubscribed = function(/*String*/ topic, /*Function*/ func) { ... }

/**
 * subscribe is used to subscribe a callback to a topic
 * @param {String} topic is the topic that will be listened
 * @param {Function} func is the name of the function of obj to call when a message is received on the topic
 * 
 * func is a function that take a Object in parameter. the event received have this format:
 * {senderId:senderId, message:message, topic: topic}
 *
 */
Topic.prototype.subscribe = function(/*String*/ topic, /*Function*/ func) { ... }

/**
 * unsubscribe is used to unsubscribe a callback to a topic
 * @param {String} topic is the topic
 * @param {Object} id is the id of the listener we want to unsubscribe
 */
Topic.prototype.unsubscribe = function(/*String*/ topic, /*Object*/ id) { ... }

Topic.prototype.initCometdBridge = function() { ... }
</programlisting>
	</section>
	
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Syntax">
		<title>Syntax</title>
		<para>
			The three messaging functions require particular objects and definitions in their syntax:
		</para>

		<variablelist>
			<varlistentry>
			<term>Subscribe</term>
				<listitem>
					<para>	
						The <literal>subscribe</literal> function is used to subscribe a callback to a topic. It uses the following parameters:
					</para>
					<variablelist>
						<varlistentry>
							<term>topic</term>
							<listitem>
								<para>
									The topic that will be listened for.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>func</term>
							<listitem>
								<para>
									The name of the object function to call when a message is received on the topic. It has to be a function that takes an Object parameter. The event received will have this format: 
<programlisting>{
  senderId:senderId,
  message:message,
  topic: topic
}
</programlisting>
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Publish</term>
				<listitem>
					<para>
						The <literal>publish</literal> function is used to publish an event to the other subscribered applications through the given channels. Its parameters are: 
					</para>
					<variablelist>
						<varlistentry>
							<term>senderId</term>
							<listitem>
								<para>
									This is a string that identifies the sender.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>topicName</term>
								<listitem>
									<para>
										The topic that the message will be published.
									</para>
								</listitem>
						</varlistentry>
						<varlistentry>
							<term>message</term>
								<listitem>
									<para>
										This is the message body to be delivered to the subscribers to the topic.
									</para>
								</listitem>
						</varlistentry>
					</variablelist>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Unsubscribe</term>
				<listitem>
					<para>
						The <literal>unsubscribe</literal> function is used to unsubscribe a callback to a topic. The required parameters are: 
					</para>
					<variablelist>
						<varlistentry>
							<term>topic</term>
							<listitem>
								<para>
									The topic that will is to be unsubscribed from.
								</para>
							</listitem>
						</varlistentry>
						<varlistentry>
							<term>id</term>
							<listitem>
								<para>
									This is the context object.
								</para>
							</listitem>
						</varlistentry>
					</variablelist>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Example">
		<title>Example [of what?]</title>
		
<programlisting role="HTML">&lt;%@ taglib uri="http://java.sun.com/portlet" prefix="portlet" %&gt;
&lt;portlet:defineObjects/&gt;
&lt;div&gt;
  &lt;p&gt;
    Received messages:
    &lt;div id="received_&lt;portlet:namespace/&gt;"&gt;
         
    &lt;/div&gt;
  &lt;/p&gt;
   
  &lt;p&gt;
    Send message:
    &lt;input type="text" id="msg_&lt;portlet:namespace/&gt;"/&gt; &lt;a href="#" onclick="send_&lt;portlet:namespace/&gt;();"&gt;send&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;
   
  Function.prototype.bind = function(object) {
    var method = this;
      return function() {
      method.apply(object, arguments);
    }
  }
   
  function send_&lt;portlet:namespace/&gt;() {
    var msg = document.getElementById("msg_&lt;portlet:namespace/&gt;").value;
    eXo.core.Topic.publish("&lt;portlet:namespace/&gt;", "/demo", msg);
  }
   
  function Listener_&lt;portlet:namespace/&gt;(){
      
  }
   
  Listener_&lt;portlet:namespace/&gt;.prototype.receiveMsg = function(event) {
    document.getElementById("received_&lt;portlet:namespace/&gt;").innerHTML = 
      document.getElementById("received_&lt;portlet:namespace/&gt;").innerHTML + "&lt;br /&gt;* " + 
      event.senderId + ": " + event.message;
  }
   
  function init_&lt;portlet:namespace/&gt;() {
    var listener_&lt;portlet:namespace/&gt; = new Listener_&lt;portlet:namespace/&gt;();
    eXo.core.Topic.subscribe("/demo", listener_&lt;portlet:namespace/&gt;.receiveMsg.bind(listener_&lt;portlet:namespace/&gt;));
  }
   
  init_&lt;portlet:namespace/&gt;();
&lt;/script&gt;
</programlisting>
	</section>

</section>


