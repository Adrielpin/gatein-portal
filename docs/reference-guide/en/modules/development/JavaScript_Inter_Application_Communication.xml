<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section
   id="sect-Reference_Guide-JavaScript_Inter_Application_Communication">
   <title>JavaScript Inter Application Communication</title>
   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Overview">
      <title>Overview</title>
      <para>
         This kind of communication is made to allow applications within a page to
         exchange data. This library is made for broadcasting messages
         on topic. This is basically based on 3 functions : subscribe,
         publish and unsubscribe.
		</para>
      <para>
         When you subscribe to a topic, you receive all the subtopic message. for
         example, if I subscribe to "/eXo/application", and an
         application send a message on "/eXo/application/map", i will
         receive it, but if another application send a message on
         "/eXo", i will not receive it.
		</para>
   </section>
<!-- 
   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Common_topics">
      <title>Common topics</title>
      <para>
         Stuff Goes Here?
		</para>
   </section>
 -->
   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateIn">
      <title>/eXo</title>
      <para>
         It contains all the events generated by the platform.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalnotification">
      <title>/eXo/portal/notification
      </title>
      <para>
         When a message is sent on this topic, a popup message appears on the top
         right of the screen.
		</para>
   </section>
<!-- 
   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalchangeTitle">
      <title>/GateIn/portal/changeTitle (not
         implemented yet)</title>
      <para>
         Send a message on this channel to change (and to be notified) the title
         of the portal.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalpageLoaded">
      <title>/GateIn/portal/pageLoaded (not
         implemented yet)</title>
      <para>
         Receive a message when a page is loaded.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalpageUnloaded">
      <title>/eXo/portal/pageUnloaded (not
         implemented yet)</title>
      <para>
         Receive a message when a page is unloaded.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInapplicationapplicationLoaded">
      <title>/eXo/application/applicationLoaded
         (not implemented yet)</title>
      <para>
         Receive a message when an application is loaded in the page.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInapplicationapplicationUnloaded">
      <title>/eXo/application/applicationUnloaded
         (not implemented yet)</title>
      <para>
         Receive a message when an application is unloaded in the page.
		</para>
   </section>
 -->
 
   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Library">
      <title>Library</title>
      <para>
         The inter application communication library can be found in
         <filename>01eXoResources.war:/javascript/eXo/core/Topic.js</filename>
      </para>
      <programlisting><![CDATA[/**
 * publish is used to publish an event to the other subscribers to the given channels
 * @param {Object} senderId is a string that identify the sender
 * @param {String} topic is the topic that the message will be published
 * @param {Object} message is the message that's going to be delivered to the subscribers to the topic
 */
Topic.prototype.publish = function(/*Object*/ senderId, /*String*/ topicName, /*Object*/ message ) { ... }

/**
 * isSubscribed is used to check if a function receive the events from a topic
 * @param {String} topic The topic.
 * @param {Function} func is the name of the function of obj to call when a message is received on the topic
 */
Topic.prototype.isSubscribed = function(/*String*/ topic, /*Function*/ func) { ... }

/**
 * subscribe is used to subscribe a callback to a topic
 * @param {String} topic is the topic that will be listened
 * @param {Function} func is the name of the function of obj to call when a message is received on the topic
 * 
 * func is a function that take a Object in parameter. the event received have this format:
 * {senderId:senderId, message:message, topic: topic}
 *
 */
Topic.prototype.subscribe = function(/*String*/ topic, /*Function*/ func) { ... }

/**
 * unsubscribe is used to unsubscribe a callback to a topic
 * @param {String} topic is the topic
 * @param {Object} id is the id of the listener we want to unsubscribe
 */
Topic.prototype.unsubscribe = function(/*String*/ topic, /*Object*/ id) { ... }

Topic.prototype.initCometdBridge = function() { ... }]]></programlisting>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Syntax">
      <title>Syntax</title>

      <para><literal>subscribe</literal> is used to subscribe a callback to a topic.
      Parameters:
      <itemizedlist>
         <listitem><para><literal>topic</literal> is the topic that will be listened</para></listitem>
         <listitem><para><literal>func</literal> is the name of the function of obj to call when a message is received on the topic.
         It has to be a function that take an Object in parameter. the event received have this format:
         <programlisting>{
  senderId:senderId,
  message:message,
  topic: topic
}</programlisting>
         </para></listitem>
      </itemizedlist>
      </para>

      <para><literal>publish</literal> is used to publish an event to the other subscribers to the given channels.
      Parameters:
      <itemizedlist>
         <listitem><para><literal>senderId</literal> is a string that identify the sender</para></listitem>
         <listitem><para><literal>topicName</literal> is the topic that the message will be published</para></listitem>
         <listitem><para><literal>message</literal> is the message that's going to be delivered to the subscribers to the topic</para></listitem>
      </itemizedlist>
      </para>
      <para><literal>unsubscribe</literal> is used to unsubscribe a callback to a topic
     Parameters:
         <itemizedlist>
            <listitem><para><literal>topic</literal> is the topic that will be unsubscribe</para></listitem>
            <listitem><para><literal>id</literal> is the context object</para></listitem>
         </itemizedlist>
      </para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Example">
      <title>Example</title>
      <programlisting role="HTML"><![CDATA[<%@ taglib uri="http://java.sun.com/portlet" prefix="portlet" %>
<portlet:defineObjects/>
<div>
  <p>
    Received messages:
    <div id="received_<portlet:namespace/>">
         
    </div>
  </p>
   
  <p>
    Send message:
    <input type="text" id="msg_<portlet:namespace/>"/> <a href="#" onclick="send_<portlet:namespace/>();">send</a>
  </p>
</div>

<script type="text/javascript">
   
  Function.prototype.bind = function(object) {
    var method = this;
      return function() {
      method.apply(object, arguments);
    }
  }
   
  function send_<portlet:namespace/>() {
    var msg = document.getElementById("msg_<portlet:namespace/>").value;
    eXo.core.Topic.publish("<portlet:namespace/>", "/demo", msg);
  }
   
  function Listener_<portlet:namespace/>(){
      
  }
   
  Listener_<portlet:namespace/>.prototype.receiveMsg = function(event) {
    document.getElementById("received_<portlet:namespace/>").innerHTML = 
      document.getElementById("received_<portlet:namespace/>").innerHTML + "<br />* " + 
      event.senderId + ": " + event.message;
  }
   
  function init_<portlet:namespace/>() {
    var listener_<portlet:namespace/> = new Listener_<portlet:namespace/>();
    eXo.core.Topic.subscribe("/demo", listener_<portlet:namespace/>.receiveMsg.bind(listener_<portlet:namespace/>));
  }
   
  init_<portlet:namespace/>();
</script>]]></programlisting>
   </section>

</section>


