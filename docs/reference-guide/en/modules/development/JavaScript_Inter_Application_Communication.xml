<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../Reference_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication">
	<title>JavaScript Inter Application Communication</title>
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Overview">
		<title>Overview</title>
		<para>
			This kind of communication is made to allow applications within a page to exchange data. This library is made for broadcasting messages on topic. This is basically based on 3 functions : subscribe, publish and unsubscribe.
		</para>
		<para>
			When you subscribe to a topic, you receive all the subtopic message. for example, if I subscribe to "/eXo/application", and an application send a message on "/eXo/application/map", i will receive it, but if another application send a message on "/eXo", i will not receive it.
		</para>
	</section>
	
	<!--  
   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Common_topics">
      <title>Common topics</title>
      <para>
         Stuff Goes Here?
		</para>
   </section>
  -->
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-eXo">
		<title>/eXo</title>
		<para>
			It contains all the events generated by the platform.
		</para>
	</section>
	
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-eXoportalnotification_">
		<title>/eXo/portal/notification </title>
		<para>
			When a message is sent on this topic, a popup message appears on the top right of the screen.
		</para>
	</section>
	
	<!--  
   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalchangeTitle">
      <title>/GateIn/portal/changeTitle (not
         implemented yet)</title>
      <para>
         Send a message on this channel to change (and to be notified) the title
         of the portal.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalpageLoaded">
      <title>/GateIn/portal/pageLoaded (not
         implemented yet)</title>
      <para>
         Receive a message when a page is loaded.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInportalpageUnloaded">
      <title>/eXo/portal/pageUnloaded (not
         implemented yet)</title>
      <para>
         Receive a message when a page is unloaded.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInapplicationapplicationLoaded">
      <title>/eXo/application/applicationLoaded
         (not implemented yet)</title>
      <para>
         Receive a message when an application is loaded in the page.
		</para>
   </section>

   <section
      id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-GateInapplicationapplicationUnloaded">
      <title>/eXo/application/applicationUnloaded
         (not implemented yet)</title>
      <para>
         Receive a message when an application is unloaded in the page.
		</para>
   </section>
  -->
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Library">
		<title>Library</title>
		<para>
			The inter application communication library can be found in <filename>01eXoResources.war:/javascript/eXo/core/Topic.js</filename>
		</para>
		
<programlisting>/**
 * publish is used to publish an event to the other subscribers to the given channels
 * @param {Object} senderId is a string that identify the sender
 * @param {String} topic is the topic that the message will be published
 * @param {Object} message is the message that's going to be delivered to the subscribers to the topic
 */
Topic.prototype.publish = function(/*Object*/ senderId, /*String*/ topicName, /*Object*/ message ) { ... }

/**
 * isSubscribed is used to check if a function receive the events from a topic
 * @param {String} topic The topic.
 * @param {Function} func is the name of the function of obj to call when a message is received on the topic
 */
Topic.prototype.isSubscribed = function(/*String*/ topic, /*Function*/ func) { ... }

/**
 * subscribe is used to subscribe a callback to a topic
 * @param {String} topic is the topic that will be listened
 * @param {Function} func is the name of the function of obj to call when a message is received on the topic
 * 
 * func is a function that take a Object in parameter. the event received have this format:
 * {senderId:senderId, message:message, topic: topic}
 *
 */
Topic.prototype.subscribe = function(/*String*/ topic, /*Function*/ func) { ... }

/**
 * unsubscribe is used to unsubscribe a callback to a topic
 * @param {String} topic is the topic
 * @param {Object} id is the id of the listener we want to unsubscribe
 */
Topic.prototype.unsubscribe = function(/*String*/ topic, /*Object*/ id) { ... }

Topic.prototype.initCometdBridge = function() { ... }
</programlisting>
	</section>
	
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Syntax">
		<title>Syntax</title>
		<para>
			<literal>subscribe</literal> is used to subscribe a callback to a topic. Parameters: 
			<itemizedlist>
				<listitem>
					<para>
						<literal>topic</literal> is the topic that will be listened
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>func</literal> is the name of the function of obj to call when a message is received on the topic. It has to be a function that take an Object in parameter. the event received have this format: 
<programlisting>{
  senderId:senderId,
  message:message,
  topic: topic
}
</programlisting>
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			<literal>publish</literal> is used to publish an event to the other subscribers to the given channels. Parameters: 
			<itemizedlist>
				<listitem>
					<para>
						<literal>senderId</literal> is a string that identify the sender
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>topicName</literal> is the topic that the message will be published
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>message</literal> is the message that's going to be delivered to the subscribers to the topic
					</para>
				</listitem>
			</itemizedlist>
		</para>
		<para>
			<literal>unsubscribe</literal> is used to unsubscribe a callback to a topic Parameters: 
			<itemizedlist>
				<listitem>
					<para>
						<literal>topic</literal> is the topic that will be unsubscribe
					</para>
				</listitem>
				<listitem>
					<para>
						<literal>id</literal> is the context object
					</para>
				</listitem>
			</itemizedlist>
		</para>
	</section>
	
	<section id="sect-Reference_Guide-JavaScript_Inter_Application_Communication-Example">
		<title>Example</title>
		
<programlisting role="HTML">&lt;%@ taglib uri="http://java.sun.com/portlet" prefix="portlet" %&gt;
&lt;portlet:defineObjects/&gt;
&lt;div&gt;
  &lt;p&gt;
    Received messages:
    &lt;div id="received_&lt;portlet:namespace/&gt;"&gt;
         
    &lt;/div&gt;
  &lt;/p&gt;
   
  &lt;p&gt;
    Send message:
    &lt;input type="text" id="msg_&lt;portlet:namespace/&gt;"/&gt; &lt;a href="#" onclick="send_&lt;portlet:namespace/&gt;();"&gt;send&lt;/a&gt;
  &lt;/p&gt;
&lt;/div&gt;

&lt;script type="text/javascript"&gt;
   
  Function.prototype.bind = function(object) {
    var method = this;
      return function() {
      method.apply(object, arguments);
    }
  }
   
  function send_&lt;portlet:namespace/&gt;() {
    var msg = document.getElementById("msg_&lt;portlet:namespace/&gt;").value;
    eXo.core.Topic.publish("&lt;portlet:namespace/&gt;", "/demo", msg);
  }
   
  function Listener_&lt;portlet:namespace/&gt;(){
      
  }
   
  Listener_&lt;portlet:namespace/&gt;.prototype.receiveMsg = function(event) {
    document.getElementById("received_&lt;portlet:namespace/&gt;").innerHTML = 
      document.getElementById("received_&lt;portlet:namespace/&gt;").innerHTML + "&lt;br /&gt;* " + 
      event.senderId + ": " + event.message;
  }
   
  function init_&lt;portlet:namespace/&gt;() {
    var listener_&lt;portlet:namespace/&gt; = new Listener_&lt;portlet:namespace/&gt;();
    eXo.core.Topic.subscribe("/demo", listener_&lt;portlet:namespace/&gt;.receiveMsg.bind(listener_&lt;portlet:namespace/&gt;));
  }
   
  init_&lt;portlet:namespace/&gt;();
&lt;/script&gt;
</programlisting>
	</section>

</section>


