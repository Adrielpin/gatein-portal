<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../Reference_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="sect-Reference_Guide-Upload_Component">
	<title>Upload Component</title>
<!--	<section id="sect-Reference_Guide-Upload_Component-Overview">
		<title>Overview</title>
		<para>
			In this article, you will learn how to :
		</para>
		<itemizedlist>
			<listitem>
				<para>
					configure the Upload service
				</para>
			</listitem>
			<listitem>
				<para>
					add a default upload size limit
				</para>
			</listitem>
			<listitem>
				<para>
					use the Upload component in your application, with a specific upload size limit
				</para>
			</listitem>
			<listitem>
				<para>
					clean the service when the upload finishes
				</para>
			</listitem>
		</itemizedlist>
	</section> -->
	
	<section id="sect-Reference_Guide-Upload_Component-Upload_Service">
		<title>Upload Service</title>
		<para>
			The service is defined by the class: <literal>org.exoplatform.upload.UploadService</literal>;
		</para>
		<para>
			This can be configured with the following xml code:
		</para>
		
<programlisting role="XML">&lt;component&gt;
   &lt;type&gt;org.exoplatform.upload.UploadService&lt;/type&gt;
     &lt;init-params&gt;
       &lt;value-param&gt;
        &lt;name&gt;upload.limit.size&lt;/name&gt;
        &lt;description&gt;Maximum size of the file to upload in MB&lt;/description&gt;
        &lt;value&gt;10&lt;/value&gt;
      &lt;/value-param&gt;
    &lt;/init-params&gt;  
  &lt;/component&gt;
</programlisting>
		<para>
			This code allows for a default upload size limit for the service to be configured. The value unit is in MegaBytes.
		</para>	
		<para>
			This limit will be used by default by all applications if no application-specific limit is set. Setting a different limit for applications is discussed in a later section.
		</para>
		<para>
			If the value is set at <parameter>0</parameter> the upload size is unlimited.
		</para>

		<procedure id="proc-Reference_Guide-Upload_Component-How_to_use_the_upload_component">
			<title>How to use the upload component</title>
			<step>
				<para>
				Create an object type <literal>org.exoplatform.webui.form.UIFormUploadInput</literal>.
				</para>
				<para>
					Two constructors are available for this:
				</para>
						
<programlisting>public UIFormUploadInput(String name, String bindingExpression)
</programlisting>
				<para>
					or:
				</para>
						
<programlisting>public UIFormUploadInput(String name, String bindingExpression, int limit)
</programlisting>
				<para>
					This is an example using the second form :
				</para>
						
<programlisting role="JAVA">PortletRequestContext pcontext = (PortletRequestContext)WebuiRequestContext.getCurrentInstance();
PortletPreferences portletPref = pcontext.getRequest().getPreferences();
int limitMB = Integer.parseInt(portletPref.getValue("uploadFileSizeLimitMB", "").trim());
UIFormUploadInput uiInput = new UIFormUploadInput("upload", "upload", limitMB);
</programlisting>
			</step>
			<step>
				<para>
					To obtain the limit from the <literal>xml</literal> configuration, this piece of code can be added to the either <filename>portlet.xml</filename> or <filename>portlet-preferences.xml</filename> :
				</para>

<programlisting role="XML">&lt;preference&gt;
  &lt;name&gt;uploadFileSizeLimitMB&lt;/name&gt;
  &lt;value&gt;30&lt;/value&gt;
  &lt;read-only&gt;false&lt;/read-only&gt;
&lt;/preference&gt;
</programlisting>
		<para>
			Again, a <parameter>0</parameter> value means an unlimited upload size, and the value unit is set in MegaBytes.
		</para>
			</step>
			<step>
				<para>
					Use the <literal>getUploadDataAsStream()</literal> method to get the uploaded data:
				</para>
		
<programlisting role="JAVA">UIFormUploadInput input = (UIFormUploadInput)uiForm.getUIInput("upload");
InputStream inputStream = input.getUploadDataAsStream();
...
jcrData.setValue(inputStream);
</programlisting>
			</step>
			<step>
				<para>
					The upload service stores a temporary file on the filesystem during the upload process. When the upload is finished, the service must be cleaned in order to:
				</para>
				<orderedlist numeration="arabic">
					<listitem>
						<para>
							Delete the temporary file.
						</para>
					</listitem>
					<listitem>
						<para>
							Delete the classes used for the upload.
						</para>
					</listitem>
				</orderedlist>
				<para>
					Use the<literal>removeUpload()</literal> method defined in the upload service to purge the file:
				</para>
		
<programlisting role="JAVA">UploadService uploadService = uiForm.getApplicationComponent(UploadService.class) ;
UIFormUploadInput uiChild = uiForm.getChild(UIFormUploadInput.class) ;
uploadService.removeUpload(uiChild.getUploadId()) ;
</programlisting>
<note>
	<title>Saving the uploaded file</title>
	<para>
		Ensure the file is saved <emphasis role="bold">before</emphasis> the service is cleaned.
	</para>
</note>
			</step>
		</procedure>
	</section>

</section>


