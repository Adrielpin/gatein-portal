<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../../Reference_Guide.ent">
%BOOK_ENTITIES;
]>
<section id="sect-Reference_Guide-Groovy_Templates">
	<title>Groovy Templates</title>
	<section id="sect-Reference_Guide-Groovy_Templates-Overview">
		<title>Overview</title>
		<para>
			This article gives a glance at the Groovy language, and explains how to configure the portlet and and the groovy template.
		</para>
		<para>
			It's recommended to read also <xref linkend="sect-Reference_Guide-AJAX_Framework" /> in order to understand better the communication between the Groovy Template and the portlet.
		</para>
	</section>
	
	<section id="sect-Reference_Guide-Groovy_Templates-Basic_structure">
		<title>Basic structure</title>
		<para>
			The structure of a template is very easy :
		</para>
		<itemizedlist>
			<listitem>
				<para>
					The HTML code
				</para>
			</listitem>
			<listitem>
				<para>
					zero or more groovy language code blocks, enclosed by &lt;% ... %&gt;
				</para>
			</listitem>
		</itemizedlist>
		<para>
			The HTML code in the template doesn't have to contain the <literal>html</literal> , or <literal>body</literal> tags. Hence, you can use a groovy template for a component that will be rendered in another component.
		</para>
		<para>
			Example :
		</para>
		
<programlisting role="HTML">&lt;!DOCTYPE html 
    PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
           "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"&gt;
&lt;%
  import org.exoplatform.webui.core.UIComponent;
  def currentPage = uicomponent.getCurrentPage();
  ... 
%&gt;
  ...
  &lt;div class="$uicomponent.skin" id="UIPortalApplication"&gt;
    &lt;%uicomponent.renderChildren();%&gt;
  &lt;/div&gt;
</programlisting>
	</section>
	
	<section id="sect-Reference_Guide-Groovy_Templates-Groovy_language">
		<title>Groovy language</title>
		<para>
			Groovy is a scripting language for Java. Here are a few examples on how to use it, but you can find more information in <ulink url="http://groovy.codehaus.org/Documentation">the full documentation</ulink> .
		</para>
		<para>
			This language looks like Java a lot, so it's very easy to use. Examples :
		</para>
		<para>
			Variables definition :
		</para>
		
<programlisting>int min = 1;
def totalPage = uicomponent.getAvailablePage();
String name = "uiPortlet";
categories = uicomponent.getItemCategories();
String columns = uicomponent.getColumns();
</programlisting>
		<para>
			Other expressions :
		</para>
		
<programlisting>for(category in categories) { ... }
for(i in min..max) { ... } // min and max are int variables
println "&lt;/div&gt;" ;
println """
  &lt;div class="Item"&gt;
    &lt;div class="OverflowContainer"&gt;
""";
&lt;%=uicomponent.getToolbarStyle();%&gt; // &lt;%= to avoid a call of println method
import org.exoplatform.portal.config.model.PageNode;
</programlisting>
	</section>
	
	<section id="sect-Reference_Guide-Groovy_Templates-Linking_a_portlet_with_a_template">
		<title>Linking a portlet with a template</title>
		<section id="sect-Reference_Guide-Linking_a_portlet_with_a_template-Portlet_configuration">
			<title>Portlet configuration</title>
			<para>
				The configuration of a portlet is partly made with <literal>ComponentConfig</literal> annotations (others are ComponentConfigs, EventConfig, etc). One of the parameters of this annotation is called <literal>template</literal>, where you can define the path to the template file associated with this portlet.
			</para>
			<para>
				To specify this parameter to your portlet, just add this statement to your configuration annotation, for example in <emphasis role="bold">src:/portlet/exoadmin/src/main/java/org/exoplatform/applicationregistry/webui/component/ </emphasis> you find <emphasis role="bold">UIApplicationForm.java</emphasis> :
			</para>
			
<programlisting>@ComponentConfig(
  lifecycle = UIFormLifecycle.class,
  template =  "system:/groovy/webui/form/UIFormWithTitle.gtmpl",
  events = {
    @EventConfig(listeners = UIApplicationForm.SaveActionListener.class),
    @EventConfig(phase = Phase.DECODE, listeners = UIApplicationForm.CancelActionListener.class)
  }
)
</programlisting>
			<para>
				You see that the path is in the namespace called "system", "system" is a reference to the portal webapp. In this webapp you find some reusable groovy templates, just open the folder <emphasis role="bold">src:/web/portal/src/main/webapp/groovy/webui/form/ </emphasis> to see them.
			</para>
			<para>
				As you want to create your own template, create a groovy file in your webbapp and refer to it. Please use the namespace "app" for refering to the same webapp as your component. GateIn always puts the component templates in a folder like "/webapp/groovy/<literal>your_portlet_name</literal>/webui/component".
			</para>
			
<programlisting>template = "app:/groovy/your_portlet_name/webui/component/your_component.gtmpl"
</programlisting>
			<para>
				You can now edit your template file.
			</para>
		</section>
		
		<section id="sect-Reference_Guide-Linking_a_portlet_with_a_template-The_template_file">
			<title>The template file</title>
			<para>
				As we said before, the template file is composed of HTML code and groovy code blocks. There are a few things more that you need to know to fully link your portlet with your template.
			</para>
			<para>
				If your template defines the UI of a component, you have an access to this component instance (the java object) using the variable <literal>uicomponent</literal>. This should be the case almost all the time, but we recommend that you check that your java class inherits from UIComponent before you use this variable. With this <literal>uicomponent</literal> variable, you can access all the attributes and functions of your component, to use them in your template. Example : UIPageIterator.gtmpl:
			</para>
			
<programlisting>&lt;%
  def currentPage = uicomponent.getCurrentPage();
%&gt;
...
&lt;a href="&lt;%=uicomponent.event("ShowPage","$currentPage")%&gt;" class="Icon LastTopPageIcon"&gt;
  &lt;span&gt;&lt;/span&gt;
&lt;/a&gt;
</programlisting>
			<para>
				This example shows that <literal>uicomponent</literal> can be used to make Ajax calls, thanks to the <literal>event</literal> method. See <xref linkend="sect-Reference_Guide-AJAX_Framework" /> for more details.
			</para>
			<para>
				Another variable that you can use is <literal>ctx</literal>. It gives access to the context in which the template is processed. Hence, you can get some elements like the request, the Javscript manager, or the resource resolver (ctx.appRes). Examples :
			</para>
			
<programlisting>&lt;%
  def rcontext = ctx.getRequestContext() ;
  context.getJavascriptManager().importJavascript('GateIn.webui.UIPopupWindow');
  ctx.appRes(popupId + ".title."+ title);
%&gt;
</programlisting>
			<para>
				If you use your template to define the user interface of a component that includes a form, you can access the instance of UIForm in a variable named <literal>uiform</literal>. The UIForm class provides the methods, <literal>begin()</literal> and <literal>end()</literal>, that write the HTML tags of the form. Your form class must inherit from <literal>UIForm</literal> , in this class you add the input elements (fields, checkboxes, lists) which you wish to use in your form. In your groovy template you can render your input elements using <literal>uiform.renderField(field)</literal>
			</para>
		</section>

	</section>

</section>


