<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section id="sect-Reference_Guide-Groovy_Templates">
	<title>Groovy Templates</title>
	<para>
		In addition to the content in this chapter, refer also to <xref linkend="sect-Reference_Guide-AJAX_Framework" /> in order to better understand the communication between the Groovy Template and the portlet.
	</para>
	<section id="sect-Reference_Guide-Groovy_Templates-Basic_structure">
		<title>Basic structure</title>
		<para>
			The structure of a template is quite simple. It consists of only two elements:
		</para>
		<orderedlist>
			<listitem>
				<para>
					The HTML code and;
				</para>
			</listitem>
			<listitem>
				<para>
					zero or more groovy language code blocks, enclosed by &#60;% ... %&#62; enclosures.
				</para>
			</listitem>
		</orderedlist>
		<para>
			The HTML code in the template doesn&#39;t have to contain the <literal>html</literal>, or <literal>body</literal> tags. This allows groovy templates for one component to also be rendered in another component.
		</para>
		<para>
			For example:
		</para>
		
<programlisting role="HTML">&#60;!DOCTYPE html 
    PUBLIC &#34;-//W3C//DTD XHTML 1.0 Strict//EN&#34;
           &#34;http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd&#34;&#62;
&#60;%
  import org.exoplatform.webui.core.UIComponent;
  def currentPage = uicomponent.getCurrentPage();
  ... 
%&#62;
  ...
  &#60;div class=&#34;$uicomponent.skin&#34; id=&#34;UIPortalApplication&#34;&#62;
    &#60;%uicomponent.renderChildren();%&#62;
  &#60;/div&#62;
</programlisting>
	</section>
	
	<section id="sect-Reference_Guide-Groovy_Templates-Groovy_language">
		<title>Groovy language</title>
		<para>
			Groovy is a scripting language for Java. Some usage examples are included in this section, however further information is available at <ulink url="http://groovy.codehaus.org/Documentation" /> .
		</para>
		<variablelist id="vari-Reference_Guide-Groovy_language-Some_examples_of_Groovy">
			<title>Some examples of Groovy</title>
			<varlistentry>
				<term>Variables definition</term>
				<listitem>
					<para>
						
<programlisting>int min = 1;
def totalPage = uicomponent.getAvailablePage();
String name = &#34;uiPortlet&#34;;
categories = uicomponent.getItemCategories();
String columns = uicomponent.getColumns();
</programlisting>
					</para>
				</listitem>
			</varlistentry>
			<varlistentry>
				<term>Other expressions</term>
				<listitem>
					<para>
						
<programlisting>for(category in categories) { ... }
for(i in min..max) { ... } // min and max are int variables
println &#34;&#60;/div&#62;&#34; ;
println &#34;&#34;&#34;
  &#60;div class=&#34;Item&#34;&#62;
    &#60;div class=&#34;OverflowContainer&#34;&#62;
&#34;&#34;&#34;;
&#60;%=uicomponent.getToolbarStyle();%&#62; // &#60;%= to avoid a call of println method
import org.exoplatform.portal.config.model.PageNode;
</programlisting>
					</para>
				</listitem>
			</varlistentry>
		</variablelist>
	</section>
	
	<section id="sect-Reference_Guide-Groovy_Templates-Linking_a_portlet_with_a_template">
		<title>Linking a portlet with a template</title>
		<section id="sect-Reference_Guide-Linking_a_portlet_with_a_template-Portlet_configuration">
			<title>Portlet configuration</title>
			<para>
				The configuration of a portlet is partly made with <literal>ComponentConfig</literal> annotations (others are <literal>ComponentConfigs</literal>, <literal>EventConfig</literal>, etc).
			</para>
			<para>
				One of the parameters of this annotation is <literal>template</literal>. This is where the path to the template file associated with this portlet is defined.
			</para>
			<para>
				To specify this parameter, add this statement to the configuration annotation.
			</para>
			<para>
				For example, in <emphasis role="bold">src:/portlet/exoadmin/src/main/java/org/exoplatform/applicationregistry/webui/component/ </emphasis> is the <emphasis role="bold">UIApplicationForm.java</emphasis> file:
			</para>
			
<programlisting>@ComponentConfig(
  lifecycle = UIFormLifecycle.class,
  template =  &#34;system:/groovy/webui/form/UIFormWithTitle.gtmpl&#34;,
  events = {
    @EventConfig(listeners = UIApplicationForm.SaveActionListener.class),
    @EventConfig(phase = Phase.DECODE, listeners = UIApplicationForm.CancelActionListener.class)
  }
)
</programlisting>
			<para>
				The path is in the &#34;<literal>system</literal>&#34; namespace. This is a reference to the portal webapp.
			</para>
			<para>
				This webapp contains reusable groovy templates in the folder; <emphasis role="bold">src:/web/portal/src/main/webapp/groovy/webui/form/ </emphasis>.
			</para>
			<para>
				Use the following steps to create a new template;
			</para>
			<procedure>
				<step>
					<para>
						Create a groovy file in the appropriate webbapp and refer to it.
					</para>
				</step>
				<step>
					<para>
						Use the namespace &#34;app&#34; for refering to the same webapp as the component.
					</para>
				</step>
				<step>
					<para>
						&PRODUCT; stores the component templates in a folder that follows this placement convention: &#34;<filename>/webapp/groovy/<literal>your_portlet_name</literal>/webui/component</filename>&#34;.
					</para>
					<para>
						
<programlisting>template = &#34;app:/groovy/your_portlet_name/webui/component/your_component.gtmpl&#34;
</programlisting>
					</para>
				</step>
				<step>
					<para>
						Edit the template file according to the information in the <xref linkend="sect-Reference_Guide-Linking_a_portlet_with_a_template-The_template_file" />.
					</para>
				</step>
			</procedure>

		</section>
		
		<section id="sect-Reference_Guide-Linking_a_portlet_with_a_template-The_template_file">
			<title>The template file</title>
			<para>
				Component template files are composed in HTML code and groovy code blocks. There are a few things more that you need to know to fully link your portlet with your template.
			</para>
			<para>
				To successfully link a portlet with a template, please ensure the following:
			</para>
			<itemizedlist>
				<listitem>
					<para>
						If the template defines the UI of a component, use the java object variable <literal>uicomponent</literal> to access this component instance.
					</para>
					<para>
						This should be the case in most instances, but it is recommended that the java class inherits from <literal>UIComponent</literal> are checked before this variable is used.
					</para>
					<para>
						Using the <literal>uicomponent</literal> variable, you can access all the attributes and functions of a component to use them in your template.
					</para>
					<para>
						Take, for example <literal>UIPageIterator.gtmpl</literal>:
					</para>
					
<programlisting>&#60;%
  def currentPage = uicomponent.getCurrentPage();
%&#62;
...
&#60;a href=&#34;&#60;%=uicomponent.event(&#34;ShowPage&#34;,&#34;$currentPage&#34;)%&#62;&#34; class=&#34;Icon LastTopPageIcon&#34;&#62;
  &#60;span&#62;&#60;/span&#62;
&#60;/a&#62;
</programlisting>
					<para>
						The following example shows how <literal>uicomponent</literal> can be used to make Ajax calls using the <literal>event</literal> method. See <xref linkend="sect-Reference_Guide-AJAX_Framework" /> for more details.
					</para>
				</listitem>
				<listitem>
					<para>
						Another variable available is <literal>ctx</literal>. This variable gives access to the context in which the template is processed.
					</para>
					<para>
						Use this variable to retrieve elements such as; the request, the Javscript manager or the resource resolver (<literal>ctx.appRes</literal>).
					</para>
					<para>
						Some usage examples are:
					</para>
					
<programlisting>&#60;%
  def rcontext = ctx.getRequestContext() ;
  context.getJavascriptManager().importJavascript(&#39;GateIn.webui.UIPopupWindow&#39;);
  ctx.appRes(popupId + &#34;.title.&#34;+ title);
%&#62;
</programlisting>
				</listitem>
				<listitem>
					<para>
						If the template defines the user interface of a component that includes a form use an instance of <literal>UIForm</literal> in a variable named <literal>uiform</literal>.
					</para>
					<para>
						The <literal>UIForm</literal> class provides the methods <literal>begin()</literal> and <literal>end()</literal> which write the HTML tags of the form.
					</para>
					<para>
						The form class must inherit from <literal>UIForm</literal>. In this class add the input elements (fields, checkboxes, lists) which are required in the form.
					</para>
					<para>
						Render the input elements in the groovy template using <literal>uiform.renderField(field)</literal>.
					</para>
				</listitem>
			</itemizedlist>
		</section>

	</section>

</section>


