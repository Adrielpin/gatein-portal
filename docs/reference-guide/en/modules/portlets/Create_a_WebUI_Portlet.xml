<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>
<section id="sect-Reference_Guide-Create_a_WebUI_Portlet">
   <title>Create a WebUI Portlet</title>
   <section id="sect-Reference_Guide-Create_a_WebUI_Portlet-Overview">
      <title>Overview</title>
      <para>
         TODO: Create example (This one doesn't exist anymore). Overall this chapter need to be reviewed, any taker ? :)
      </para>
      <para>
         This example is based on the testPortlet in portal/trunk/portlet/test.
      </para>
   </section>

   <section
      id="sect-Reference_Guide-Create_a_WebUI_Portlet-Configure_the_portlet">
      <title>Configure the portlet</title>

      <section id="sect-Reference_Guide-Create_a_WebUI_Portlet-Folder_tree">
         <title>Folder tree</title>
         <para>
            On Eclipse (or any IDE), create a new Java Project, and create this folder tree :
         </para>
         <programlisting>src
 | main
 | |- java
 | |- resources
 | |- webapp</programlisting>
 
      </section>

      <section id="sect-Reference_Guide-Create_a_WebUI_Portlet-pom.xml">
         <title>pom.xml</title>
         <para>
            Create the pom.xml, at root level of the project, like this :
		</para>

         <programlisting role="XML"><![CDATA[<project>
  <parent>
    <groupId>org.exoplatform.portal</groupId>
    <artifactId>config</artifactId>
    <version>trunk</version>
  </parent>
  <modelVersion>4.0.0</modelVersion>
  <artifactId>org.gatein.example.portlet.testRomain</artifactId>
  <packaging>war</packaging>
  <version>1.0.0</version>
  <name>gatein.portlets.testRomain</name>
  <description>Romain Test Portlet</description>
  <dependencies>
    <dependency>
      <groupId>org.exoplatform.portal</groupId>
      <artifactId>exo.portal.webui.portal</artifactId>
      <version>${org.exoplatform.portal.version}</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.exoplatform.portal</groupId>
      <artifactId>exo.portal.webui.eXo</artifactId>
      <version>${org.exoplatform.portal.version}</version>
      <scope>provided</scope>
    </dependency>
  </dependencies>
  <build>
    <finalName>testRomain</finalName>
  </build>
</project>]]></programlisting>
        </section>
		<section>
           <title>UITestRomainPortlet.java</title>
		<para>
			In java/testRomain/portlet/component/, we will create the UITestRomainPortlet.java file for the portlet :
		</para>
		
<programlisting role="JAVA"><![CDATA[package org.gatein.example.portlet.testRomain;
import org.exoplatform.webui.config.annotation.ComponentConfig;
import org.exoplatform.webui.core.lifecycle.UIApplicationLifecycle;
import org.exoplatform.webui.core.UIPortletApplication;
//this part is configuration of the portlet, we set the path to the template groovy.
 @ComponentConfig(
    lifecycle = UIApplicationLifecycle.class,
    template = "app:/groovy/testRomain/portlet/UITestRomainPortlet.gtmpl"
  )
public class UITestRomainPortlet extends UIPortletApplication {
 
  public UITestRomainPortlet() throws Exception {   
  }
}]]></programlisting>
	</section>
	<!-- 
	<section id="sect-Reference_Guide-Create_a_WebUI_Portlet-testRomain.xml">
		<title>testRomain.xml</title>
		<para>
			In src/main/resources/tomcat/, create a testRomain.xml file :
           <programlisting><![CDATA[<Context path="/test" docBase="../../../GateInProjects/portal/trunk/portlet/testPortletRomain/src/main/webapp" debug="0" reloadable="true" />]]></programlisting>
		</para>
		<para>
			docBase must be set to webapp path of the portlet when you are in the tomcat bin directory.
		</para>
	</section>
	 -->
    
	<section id="sect-Reference_Guide-Create_a_WebUI_Portlet-Portlet_Groovy_Template">
		<title>Portlet Groovy Template</title>
		<para>
			In src/main/webapp, create the groovy template for the portlet. The path to this file must match the path you set in the java file, in our case : groovy/testRomain/portlet/UITestRomainPortlet.gtmpl
		</para>
		
<programlisting role="HTML"><![CDATA[<div id="<%=uicomponent.getId();%>">
	HelloWorld
</div>]]></programlisting>
	</section>
	<section id="sect-Reference_Guide-Create_a_WebUI_Portlet-Skin_Folder">
		<title>Skin Folder</title>
		<para>
			Create the folder skin in src/main/webapp. We don't fill it now, but in this folder, you can put css stylesheet and images.
		</para>
	</section>
	
	<section id="sect-Reference_Guide-Create_a_WebUI_Portlet-Locale_Folder">
		<title>Locale Folder</title>
		<para>
			Create the folder WEB-INF/classes/locale in src/main/webapp. We don't fill it now, but in this folder, you can put language properties files. See <xref linkend="sect-Reference_Guide-Internationalization_Configuration" />.
		</para>
	</section>
	
	<section id="sect-Reference_Guide-Create_a_WebUI_Portlet-configuration.xml">
		<title>configuration.xml</title>
		<para>
			Create the file configuration.xml in WEB-INF/conf/portlet/testPortletRomain/. Content of tag &lt;ui-component-root&gt; must match your package organization.
		</para>
		
<programlisting role="XML"><![CDATA[<webui-configuration>   
  <application>     
    <ui-component-root>testRomain.portlet.component.UITestRomainPortlet</ui-component-root>
    <state-manager>org.exoplatform.webui.application.portlet.ParentAppStateManager</state-manager>
  </application>
</webui-configuration>]]></programlisting>
     </section>
     <section>
		<title>portlet.xml</title>
		<para>
			In WEB-INF, create file portlet.xml :
		</para>
		
<programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<portlet-app version="1.0" xmlns="http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd http://java.sun.com/xml/ns/portlet/portlet-app_1_0.xsd"> 
  <portlet>
    <description xml:lang="EN">Test Portlet Romain</description>
    <portlet-name>TestRomain</portlet-name>
    <display-name xml:lang="EN">Test Portlet Romain</display-name>
    <portlet-class>org.exoplatform.webui.application.portlet.PortletApplicationController</portlet-class>
    <init-param>
      <name>webui.configuration</name>
      <!-- must match the path to configuration file -->
      <value>/WEB-INF/conf/portlet/testPortletRomain/configuration.xml</value>
    </init-param>    
    <expiration-cache>0</expiration-cache>
    <supports>
      <mime-type>text/html</mime-type>
      <portlet-mode>help</portlet-mode>
    </supports>
    <supported-locale>en</supported-locale>
    <resource-bundle>locale.testRomainPortlet</resource-bundle>     
    <portlet-info>
      <title>TestPortletRomain</title>
      <short-title>TestPortlet</short-title>
      <keywords>test</keywords>
    </portlet-info>     
  </portlet>
</portlet-app>]]></programlisting>
	</section>
	
	<section id="sect-Reference_Guide-Create_a_WebUI_Portlet-web.xml">
		<title>web.xml</title>
		<para>
			In WEB-INF, create file web.xml :
		</para>
		
<programlisting role="XML"><![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE web-app PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN" "http://java.sun.com/dtd/web-app_2_3.dtd">
<web-app> 
  <!-If define the Portlet Application name MUST end with .par-> 
  <display-name>test</display-name>
  <description> This application is a portlet. It can not be used outside a portal. 
  This web.xml file is mandatory in each .par archive file. </description>
  <listener> 
    <listener-class>org.exoplatform.services.portletcontainer.impl.servlet.PortletApplicationListener</listener-class>
  </listener>
  <servlet>
    <servlet-name>PortletWrapper</servlet-name>
	<servlet-class>org.exoplatform.services.portletcontainer.impl.servlet.ServletWrapper</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>PortletWrapper</servlet-name>
	<url-pattern>/PortletWrapper</url-pattern>
  </servlet-mapping>
</web-app>]]></programlisting>
   </section>
   </section>
   <section>
		<title>Use the Portlet</title>
		<para>
			Compile your portlet, deploy it, and add it to the portal.
		</para>
		<para>
			Now, we will add a button in the portlet. This button will open a popup with a message inside.
		</para>
        <section>
           <title>Add a button</title>
		<para>
         In the groovy template, add this code :
		</para>
		
<programlisting role="HTML"><![CDATA[<div class="UIAction"> 
  <div class="ActionContainer">
    <div class="ActionButton"> 
      <div class="LightBlueStyle">
        <div class="ButtonLeft">
          <div class="ButtonRight">
            <div class="ButtonMiddle">
              <a href="<%=uicomponent.event("OpenPopup", "")%>">Open Popup</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div> 
</div>]]></programlisting>
        </section>
        <section>
           <title>Add a listener</title>
		<para>
			In the java file, in @ComponentConfig, add this code :
		</para>
		
<programlisting role="JAVA"><![CDATA[events = {
	@EventConfig(listeners = UITestRomainPortlet.OpenPopupActionListener.class)
}]]></programlisting>
		<para>
			Remark : XXXActionLister.class XXX must match the name you set for the event in the groovy.
		</para>
		
<programlisting role="JAVA"><![CDATA[static public class OpenPopupActionListener extends EventListener<UITestRomainPortlet> {
    public void execute(Event<UITestRomainPortlet> event) throws Exception {
        System.out.println("HelloWorld");
    }
}]]></programlisting>
        </section>
        <section>
		<title>Redeploy</title>
		<para>
			Redeploy the portlet and click on the button. You will see "HelloWorld" in your console. If you don't change in the portlet, try to redeploy and reboot the tomcat server.
		</para>
        </section>
        </section>
		<section>
            <title>Add a "HelloWorld" popup</title>
		<para>
			Now, we will add a popup which say "HelloWorld" when you click on the button.
		</para>
		<para>
			First, create the groovy template of the popup : in webapp/groovy/testRomain/portlet, create UIHelloWorldPopupContent.gtmpl :
		</para>
		
<programlisting role="HTML"><![CDATA[<div id="<%=uicomponent.getId();%>">
	HelloWorld in a popup
</div>]]></programlisting>
		<para>
			In java/testRomain/portlet/component, create the java file for the popup look like : {code} package testRomain.portlet.component;
		</para>
       <programlisting role="JAVA"><![CDATA[package testRomain.portlet.component;
import org.exoplatform.webui.config.annotation.ComponentConfig;
import org.exoplatform.webui.core.UIComponent;
import org.exoplatform.webui.core.lifecycle.UIApplicationLifecycle;

@ComponentConfig(
   lifecycle = UIApplicationLifecycle.class,
   template = "app:/groovy/testRomain/portlet/UIHelloWorldPopupContent.gtmpl"
  )
public class UIHelloWorldPopupContent extends UIComponent {

  public UIHelloWorldPopupContent() throws Exception {
  }

}]]></programlisting>
		<para>
			In UITestRomainPortlet.java, we will create the popup at the portlet creation (in the constructor) :
		</para>
<programlisting role="JAVA"><![CDATA[public UITestRomainPortlet() throws Exception {
  UIPopupWindow popup = addChild(UIPopupWindow.class, null, null);
  popup.setWindowSize(400, 300);
  
  UIHelloWorldPopupContent popupContent = createUIComponent(UIHelloWorldPopupContent.class, null, null);
  popup.setUIComponent(popupContent);
  popup.setRendered(false);
 ]]></programlisting>
		<para>
			At the beginning, we set the popup not visible. As you see, we add a children to the Portlet. So, if we want to see the content of it, we must add this in UITestPortletRomain.gtmpl :
		</para>
		
<programlisting><![CDATA[<% uicomponent.renderChildren(); %>]]></programlisting>
		<para>
			This makes the portlet generate the content of all child components.
		</para>
		<para>
			Change the treatment of the event, replace the println by :
		</para>
       <programlisting role="JAVA"><![CDATA[public static class OpenPopupActionListener extends EventListener<UITestRomainPortlet> {
  public void execute(Event&lt;UITestRomainPortlet> event) throws Exception {
    UITestRomainPortlet portlet = event.getSource();
    UIPopupWindow popup = portlet.getChild(UIPopupWindow.class);
    popup.setRendered(true);
    popup.setShow(true);
  }
}]]></programlisting>
		<para>
			When user clicks on the button, the popup is shown.
		</para>
		<para>
			Redeploy the portlet and click on the button. You will see "HelloWorld in a popup" in a popup. If you don't change in the portlet, try to redeploy and reboot the tomcat server.
		</para>
	</section>

</section>


