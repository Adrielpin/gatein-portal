<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../Reference_Guide.ent">
%BOOK_ENTITIES;
]>
<chapter>
  <title>Single Sign On</title>

  <section>
    <title>Overview of SSO</title>

    <para>Portal as an integration and aggregation platform provides some form
    of SSO by itself. When you log into the portal you gain access to many
    systems through portlets using a single identity. Still in many cases you
    need to integrate the portal infrastructure with other SSO enabled
    systems. There are many different Identity Management solutions on the
    market. In most cases each SSO framework provides its own way to plug into
    Java EE application.</para>
  </section>

  <section>
    <title>CAS - Central Authentication Service</title>

    <para>This Single Sign On plugin enables seamless integration between
    GateIn Portal and the CAS Single Sign On Framework. Details about CAS can
    be found <ulink
    url="http://www.ja-sig.org/products/cas/">here.</ulink></para>

    <para>The integration consitsts in two parts, the first part consists of
    installing or configuring a CAS server, the second part consists of
    setting up the portal to use the CAS server.</para>

    <section>
      <title>CAS server</title>

      <para>First we will set up the server to authenticate against the portal
      login module. You can find more information about setting up the server
      by reading the official CAS documentation, here we will install the CAS
      server on Tomcat</para>

      <section>
        <title>Obtaining CAS</title>

        <para>You can download CAS from
        http://www.jasig.org/cas/download.</para>

        <para>Once downloaded extract it in what we will call $CAS_HOME from
        now.</para>
      </section>

      <section>
        <title>Modifying CAS server</title>

        <para>To simplify we will directly modify the sources so that the
        produced web archive is configured the way we want.</para>

        <para>First we will want to change the authenticaton handler to use
        the portal authentication handler:</para>

        <para>The CAS Server Plugin makes secure authentication callbacks to a
        RESTful service installed on the remote GateIn server in order to
        authenticate a user. In order for the plugin to function correctly, it
        needs to be properly configured to connect to this service. This
        configuration is done via the
        <emphasis>cas.war/WEB-INF/deployerConfigContext.xml</emphasis>
        file.</para>

        <orderedlist>
          <listitem>
            <para>Open
            $CAS_HOME/cas-server-webapp/src/main/webapp/WEB-INF/deployerConfigContext.xml</para>
          </listitem>

          <listitem>
            <para>Replace: <programlisting role="XML"> &lt;!--
  | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, 
  | AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
  | authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
  | until it finds one that both supports the Credentials presented and succeeds in authenticating.
  +--&gt;
 &lt;property name="authenticationHandlers"&gt;
   &lt;list&gt;
     &lt;!--
      | This is the authentication handler that authenticates services by means of callback via SSL, thereby validating
      | a server side SSL certificate.
      +--&gt;
     &lt;bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
           p:httpClient-ref="httpClient" /&gt;
     &lt;!--
      | This is the authentication handler declaration that every CAS deployer will need to change before deploying CAS 
      | into production.  The default SimpleTestUsernamePasswordAuthenticationHandler authenticates UsernamePasswordCredentials
      | where the username equals the password.  You will need to replace this with an AuthenticationHandler that implements your
      | local authentication strategy.  You might accomplish this by coding a new such handler and declaring
      | edu.someschool.its.cas.MySpecialHandler here, or you might use one of the handlers provided in the adaptors modules.
      +--&gt;
     &lt;bean
        class="org.jasig.cas.authentication.handler.support.SimpleTestUsernamePasswordAuthenticationHandler" /&gt;
   &lt;/list&gt;
 &lt;/property&gt;</programlisting></para>
          </listitem>

          <listitem>
            <para>With the following (Make sure to set the host, port and
            context with the values corresponding to your portal)</para>

            <para><programlisting role="XML">&lt;!--
 | Whereas CredentialsToPrincipalResolvers identify who it is some Credentials might authenticate, 
 | AuthenticationHandlers actually authenticate credentials.  Here we declare the AuthenticationHandlers that
 | authenticate the Principals that the CredentialsToPrincipalResolvers identified.  CAS will try these handlers in turn
 | until it finds one that both supports the Credentials presented and succeeds in authenticating.
 +--&gt;
 &lt;property name="authenticationHandlers"&gt;
   &lt;list&gt;
     &lt;!--
      | This is the authentication handler that authenticates services by means of callback via SSL, thereby validating
      | a server side SSL certificate.
      +--&gt;
     &lt;bean class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
           p:httpClient-ref="httpClient" /&gt;
     &lt;!--
      | This is the authentication handler declaration that every CAS deployer will need to change before deploying CAS 
      | into production.  The default SimpleTestUsernamePasswordAuthenticationHandler authenticates UsernamePasswordCredentials
      | where the username equals the password.  You will need to replace this with an AuthenticationHandler that implements your
      | local authentication strategy.  You might accomplish this by coding a new such handler and declaring
      | edu.someschool.its.cas.MySpecialHandler here, or you might use one of the handlers provided in the adaptors modules.
      +--&gt;
     &lt;!-- Integrates with the Gatein Authentication Service to perform authentication --&gt;
     &lt;!--
      | Note: Modify the Plugin Configuration based on the actual information of a GateIn instance.
      | The instance can be anywhere on the internet...Not necessarily on localhost where CAS is running 
      +--&gt;
     &lt;bean class="org.gatein.sso.cas.plugin.AuthenticationPlugin"&gt;
        &lt;property name="gateInHost"&gt;&lt;value&gt;localhost&lt;/value&gt;&lt;/property&gt;
        &lt;property name="gateInPort"&gt;&lt;value&gt;8080&lt;/value&gt;&lt;/property&gt;
        &lt;property name="gateInContext"&gt;&lt;value&gt;portal&lt;/value&gt;&lt;/property&gt;
     &lt;/bean&gt;
   &lt;/list&gt;
 &lt;/property&gt;</programlisting></para>
          </listitem>

          <listitem>
            <para>Copy gatein-cas-plugin-&lt;VERSION&gt;.jar and
            commons-httpclient-&lt;VERSION&gt;.jar into the newly created
            directory
            $CAS_HOME/cas-server-webapp/src/main/webapp/WEB-INF/lib</para>
          </listitem>

          <listitem>
            <para>Get an installation of Tomcat and extract it in what we will
            call $TOMCAT_HOME. Change the default port to avoid a conflict
            with the default GateIn (for testing purposes). Edit
            $TOMCAT_HOME/conf/server.xml and replace the 8080 port to
            8888.<note>
                <para>If you are running GateIn with Tomcat on the same
                machine you will also need to change the port 8005 to
                something else to avoid port conflicts.</para>
              </note></para>
          </listitem>

          <listitem>
            <para>Go to $CAS_HOME/cas-server-webapp and do 'mvn
            install'</para>
          </listitem>

          <listitem>
            <para>Copy $CAS_HOME/cas-server-webapp/target/cas.war into
            $TOMCAT_HOME/webapps</para>

            <para>Now you should be able to start Tomcat and access
            http://localhost:8888/cas but at this stage you won't be able to
            login.</para>
          </listitem>
        </orderedlist>
      </section>
</section>
      <section>
        <title>Setup the CAS client</title>

        <orderedlist>
          <listitem>
            <para>Copy the CAS client core
            ($CAS_HOME/cas-server-webapp/target/cas-server-webapp-&lt;VERSION&gt;/WEB-INF/lib/cas-client-core-&lt;VERSION&gt;.jar
            into gatein.ear/lib (Or if you are running GateIn in Tomcat, in
            $GATEIN_HOME/lib)</para>
          </listitem>

          <listitem>
            <para>In JBoss AS, edit gatein.ear/META-INF/gatein-jboss-beans.xml
            and uncomment the section for CAS</para>

            <para><programlisting role="XML">&lt;authentication&gt;
  &lt;login-module code="org.gatein.sso.agent.login.SSOLoginModule" flag="required"&gt;
  &lt;/login-module&gt;      
  &lt;login-module code="org.exoplatform.services.security.j2ee.JbossLoginModule" flag="required"&gt;
    &lt;module-option name="portalContainerName"&gt;portal&lt;/module-option&gt;
    &lt;module-option name="realmName"&gt;gatein-domain&lt;/module-option&gt;
  &lt;/login-module&gt;
&lt;/authentication&gt;</programlisting></para>

            <para>If you are running GateIn in Tomcat, edit
            $GATEIN_HOME/conf/jaas.conf and uncomment the secion for
            CAS</para>

            <para><programlisting>org.gatein.sso.agent.login.SSOLoginModule required
org.exoplatform.services.security.j2ee.JbossLoginModule required
portalContainerName=portal
realmName=gatein-domain</programlisting>At this point, you can test the
            installation, start GateIn (assuming that the CAS server using
            Tomcat is still running) by going to http://localhost:8888/cas you
            should be able to login with username 'root' and password 'gtn' or
            any account created through the portal.</para>
          </listitem>
        </orderedlist>
      </section>

      <section>
        <title>Setup the portal to redirect to CAS</title>

        <para>Now we want to tell GateIn to redirect all user authentication
        to the CAS server.</para>

        <para>The CAS server can be located anywhere on the Internet, and this
        information must be properly configured within the GateIn instance.
        This configuration needs to be done in 3 files <itemizedlist>
            <listitem>
              <emphasis>In
              gatein.ear/02portal.war/groovy/portal/webui/UILoginForm.gtmpl
              replace the javascript at the bottom by:</emphasis>

              <para>
                <programlisting>&lt;script&gt;
&lt;%=uicomponent.event("Close");%&gt;
  window.location = 'http://localhost:8888/cas/login?service=http://localhost:8080/portal/private/classic';
&lt;/script&gt;
</programlisting>
              </para>
            </listitem>

            <listitem>
              <emphasis>In gatein.ear/02portal.war/login/jsp/login.jsp replace
              everything by:</emphasis>

              <para>
                <programlisting>&lt;html&gt;
  &lt;head&gt;
    &lt;script type="text/javascript"&gt;
       window.location = 'http://localhost:8888/cas/login?service=http://localhost:8080/portal/private/classic';
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
  &lt;/body&gt;
&lt;/html&gt;
</programlisting>
              </para>
            </listitem>

            <listitem>
              <emphasis>In gatein.ear/02portal.war/WEB-INF/web.xml replace the
              InitiateLoginServlet declaration by:</emphasis>

              <para>
                <programlisting>&lt;servlet&gt;
  &lt;servlet-name&gt;InitiateLoginServlet&lt;/servlet-name&gt;
  &lt;servlet-class&gt;org.gatein.sso.agent.GenericSSOAgent&lt;/servlet-class&gt;
  &lt;init-param&gt;
    &lt;param-name&gt;ssoServerUrl&lt;/param-name&gt;
    &lt;param-value&gt;http://localhost:8888/cas&lt;/param-value&gt;
  &lt;/init-param&gt;    
&lt;/servlet&gt;</programlisting>
              </para>
            </listitem>
          </itemizedlist></para>

        <para>From now on, all links redirecting to the user authentication
        pages will redirect to the CAS centralized authentication form.</para>
      </section>
    </section>
    <section>
      <title>Open SSO</title>

      <para></para>
  </section>
</chapter>
